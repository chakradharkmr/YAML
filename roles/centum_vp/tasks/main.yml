---
- name: Check existance of local installation media folder for CENTUM-VP
  ansible.windows.win_stat:
    path: '{{ local_ctmvp_depot }}\CENTUM\INSTALL\setup_en.exe'
  register: local_ctmvp_depot_info

- name: Create local installation media folders for CENTUM-VP
  ansible.builtin.include_tasks: st_local_ctmvp_depot.yml
  when: not local_ctmvp_depot_info.stat.exists

- name: Disable UAC for Administrators
  ansible.windows.win_regedit:
    path: HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System
    name: ConsentPromptBehaviorAdmin
    data: 0
    type: dword

- name: Disable Smartscreen
  ansible.windows.win_regedit:
    path: HKLM:\SOFTWARE\Policies\Microsoft\Windows\System
    name: EnableSmartScreen
    data: 0
    type: dword

- name: Add local group CTM_MAINTENANCE_LCL
  ansible.windows.win_group:
    name: CTM_MAINTENANCE_LCL
    description: Yokogawa CENTUM-VP local group for maintenance
    state: present

- name: Add CENTUM security groups and users when in standalone mode
  when: not using_active_directory
  block:
    - name: Create CENTUM groups for standalone mode
      ansible.windows.win_group:
        name: '{{ item }}'
        state: present
      loop:
        - CTM_ENGINEER
        - CTM_OPERATOR
        - CTM_OPC
        - CTM_MAINTENANCE
        - CTM_ENGINEER_ADM
        - ADS_MANAGER

    - name: Create CENTUM users for standalone mode
      ansible.windows.win_user:
        name: '{{ item.name }}'
        password: '{{ item.password }}'
        description: '{{ item.descr }}'
      loop:
        - { name: '{{ win_standalone_operator }}', password: '{{ win_standalone_operator_pw }}', descr: '{{ win_standalone_operator_descr }}' }
        - { name: '{{ win_standalone_engineer }}', password: '{{ win_standalone_engineer_pw }}', descr: '{{ win_standalone_engineer_descr }}' }

    - name: Add users to CTM_OPERATOR
      ansible.windows.win_group_membership:
        name: CTM_OPERATOR
        members:
          - '{{ win_standalone_operator }}'
          - '{{ win_standalone_engineer }}'
        state: present

    - name: Add user to CTM_ENGINEER
      ansible.windows.win_group_membership:
        name: CTM_ENGINEER
        members:
          - '{{ win_standalone_engineer }}'
        state: present

    - name: Add user to CTM_ENGINEER_ADM
      ansible.windows.win_group_membership:
        name: CTM_ENGINEER_ADM
        members:
          - '{{ win_standalone_engineer }}'
        state: present
# block end CENTUM

- name: Add local admins to CTM_MAINTENANCE_LCL group
  ansible.windows.win_group_membership:
    name: CTM_MAINTENANCE_LCL
    members:
      - '{{ win_local_builtin_admin }}'
      - '{{ win_local_admin }}'
    state: present

- name: Add domain admins to CTM_MAINTENANCE_LCL group
  ansible.windows.win_group_membership:
    name: CTM_MAINTENANCE_LCL
    members:
      - '{{ win_domain_name.split(".")[0] }}\{{ win_domain_admin }}'
      - '{{ win_domain_name.split(".")[0] }}\{{ win_domain_yokoadmin }}'
    state: present
  when: using_active_directory

- name: Install Rip listener service if required
  when: ansible_facts['virtualization_role'] == "guest" and ansible_facts['os_name'].find('Microsoft Windows Server') != -1
  block:
    - name: Install Rip listener service
      ansible.windows.win_optional_feature:
        name: RasRip
        state: present
      register: rasrip_status

    - name: Reboot if required
      ansible.windows.win_reboot:
      when: rasrip_status.reboot_required

- name: Check if a physical Vnet/IP card [VI702] is installed
  ansible.windows.win_shell: |
    if (Get-WmiObject Win32_PNPEntity | Where-Object {$_.PNPDeviceID -like 'PCI\VEN_1281&DEV_001B&SUBSYS_00001*'}) {
      Write-Host 'INFO - Vnet card hardware found'
    } else {
      Write-Host 'INFO - Vnet card hardware not found'
    }
  register: vnet_adapter_installed
  changed_when: false

# If the target node is physical hardware and no Vnet card is found Vnet drivers will be installed without connection to the Vnet card
# If in this scenario a Vnet card is added later on it may prove difficult to connect the driver to the hardware
# Therefore the playbook is paused when this scenario is detected to alert the user of the situation
- name: Pause the playbook if the target node is a physical PC and no Vnet card is installed (if paused here you may want to abort and check first)
  ansible.builtin.pause:
  when: ansible_facts['virtualization_role'] != "guest" and vnet_adapter_installed.stdout_lines[0] == 'INFO - Vnet card hardware not found'

- name: Install Vnet drivers
  ansible.builtin.include_tasks: st_vnet_card_drivers.yml
  vars:
    local_product_path: '{{ local_ctmvp_depot }}\CENTUM'
  when: ansible_facts['virtualization_role'] == "guest" or vnet_adapter_installed.stdout_lines[0] == 'INFO - Vnet card hardware found'

- name: Configure network adapters
  ansible.builtin.include_tasks: st_configure_nics.yml
  # when: vnet_driver_installed is defined and vnet_driver_installed.stdout_lines[0] == 'INFO - Vnet driver is installed'
  # don't see or remember the reasom to add this check, commented it out

- name: Set autologon to local admin when not using active directory
  when: not using_active_directory
  block:
    - name: Set autologon to local administrator (items hidden for security reasons)
      ansible.windows.win_regedit:
        path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
        name: '{{ item.name }}'
        data: '{{ item.data }}'
        type: '{{ item.type }}'
      loop: '{{ local_admin_autologon }}'
      no_log: true
  # block end

- name: Set autologon to domain admin when using active directory
  when: using_active_directory
  block:
    - name: Set autologon to domain administrator (items hidden for security reasons)
      ansible.windows.win_regedit:
        path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
        name: '{{ item.name }}'
        data: '{{ item.data }}'
        type: '{{ item.type }}'
      loop: '{{ domain_admin_autologon }}'
      no_log: true

    - name: Set policy to wait for network before logon
      ansible.windows.win_regedit:
        path: HKLM:\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon
        name: SyncForegroundPolicy
        data: 1
        type: dword
  # block end

- name: Check if pre-installation bootstrap exists
  ansible.windows.win_stat:
    path: '{{ local_ctmvp_depot }}\ctmvp_preinstall_bootstrap.cmd'
  register: ctmvp_preinst_bootstrap_info

- name: Execute CENTUM-VP preinstallation
  ansible.builtin.include_tasks: st_ctmvp_preinstall.yml
  when: not ctmvp_preinst_bootstrap_info.stat.exists

- name: Set CENTUM-VP revision GUID
  ansible.builtin.set_fact:
    my_ctmvp_revision_guid: '{{ item.value }}'
  loop: "{{ lookup('ansible.builtin.dict', ctmvp_revision_guid) }}"
  when: "ctmvp_revision in item.key"

- name: Check for installed CENTUM-VP revision
  ansible.windows.win_reg_stat:
    path: HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\CENTUM_{{ my_ctmvp_revision_guid }}
    name: DisplayVersion
  register: ctmvp_installed_version

- name: Execute CENTUM-VP installation
  ansible.builtin.include_tasks: st_ctmvp_install.yml
  when: not ctmvp_installed_version.exists

- name: Get status information on the Update folder for CENTUM-VP
  ansible.windows.win_stat:
    path: '{{ local_ctmvp_depot }}\Updates'
  register: local_update_folder

- name: Get list of CENTUM-VP updates to install
  ansible.windows.win_find:
    paths: '{{ local_ctmvp_depot }}\Updates'
  register: ctmvp_updates_info
  when: local_update_folder.stat.exists

- name: Install CENTUM-VP updates
  when: local_update_folder.stat.exists and ctmvp_updates_info.examined > 0
  block:
    - name: Create list of updates
      ansible.builtin.set_fact:
        ctmvp_updates: "{{ ctmvp_updates_info.files | selectattr('path') | map(attribute='filename') | list | replace('.zip', '') }}"

    - name: Install CENTUM-VP update
      ansible.builtin.include_tasks: st_ctmvp_update.yml
      when:
        - local_update_folder.stat.exists
        - ctmvp_updates_info.examined > 0
      loop: '{{ ctmvp_updates }}'
      register: ctmvp_updates_install

    - name: Reboot
      ansible.windows.win_reboot:
        msg: Reboot by Y-dPloy after CENTUM-VP update installation
        pre_reboot_delay: 10
      when: ctmvp_updates_install.changed
  # block end

- name: Check if CENTUM-VP IT-Security tool path exists
  ansible.windows.win_stat:
    path: '{{ it_security.path }}'
  register: it_security_path_info

- name: Execute CENTUM-VP IT-Security tool
  ansible.builtin.include_tasks: st_it_security.yml
  when: it_security_path_info.stat.exists

- name: Turn on UAC for Administrators
  ansible.windows.win_regedit:
    path: HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System
    name: ConsentPromptBehaviorAdmin
    data: 5
    type: dword

- name: Disable autologon
  ansible.windows.win_regedit:
    path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
    name: '{{ item.name }}'
    data: '{{ item.data }}'
    type: '{{ item.type }}'
  loop: '{{ clear_admin_autologon }}'
  register: auto_logon_disable

- name: Reset policy
  when: using_active_directory
  block:
    - name: Reset policy to wait for network before logon
      ansible.windows.win_regedit:
        path: HKLM:\Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon
        name: SyncForegroundPolicy
        data: 0
        type: dword
  # block end

- name: Set project specific passwords for default CENTUM-VP users
  ansible.builtin.include_tasks: st_ctmvp_passwd.yml
  when: set_yokogawa_user_passwords

- name: Set policy not to wait for network before logon
  ansible.builtin.include_role:
    name: gpedit
  vars:
    gpedit_target_policy_settings:
      - { user_dir: '$env:windir\System32\GroupPolicy\Machine\Registry.pol',
          reg_path: 'Software\Policies\Microsoft\Windows NT\CurrentVersion\Winlogon',
          reg_name: 'SyncForegroundPolicy',
          reg_data: '0',
          reg_type: 'DWord' }

- name: Reboot
  ansible.windows.win_reboot:
    msg: Reboot by Y-dPloy after CENTUM-VP installation
    pre_reboot_delay: 10
